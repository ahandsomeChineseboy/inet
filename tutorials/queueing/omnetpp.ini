	[General]
load-libs = inetqueueing
cmdenv-event-banners = false

[Config ActiveSourcePassiveSink]
network = ProducerConsumerTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s


#[Config ProducerConsumer]
#network = ProducerConsumerTutorialStep
#sim-time-limit = 10s
#
#*.producer.packetLength = 1B
#*.producer.productionInterval = 1s


[Config Buffer]
network = BufferTutorialStep
sim-time-limit = 10s

*.buffer.dropperClass = "inet::queueing::PacketAtCollectionBeginDropper"
*.producer*.packetLength = 1B
*.producer*.productionInterval = uniform(0s, 1s)
*.collector*.collectionInterval = uniform(0s, 2s)
*.queue*.bufferModule = "^.buffer"
*.buffer.packetCapacity = 2



[Config MarkovScheduler]
network = MarkovSchedulerTutorialStep
sim-time-limit = 100s

*.producer*.packetLength = 1B
*.producer1.productionInterval = uniform(0s, 20s)
*.producer2.productionInterval = uniform(0s, 2s)
*.scheduler.transitionProbabilities = "0 1 1 0"
*.scheduler.waitIntervals = "40 4"


[Config MarkovClassifier]
network = MarkovClassifierTutorialStep
sim-time-limit = 100s

*.provider.packetLength = 1B
*.collector1.collectionInterval = uniform(0s, 20s)
*.collector2.collectionInterval = uniform(0s, 2s)
*.classifier.transitionProbabilities = "0 1 1 0"
*.classifier.waitIntervals = "40 4"


[Config Classifier]
network = ClassifierTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.classifier.weights = "1 1"

[Config GenericClassifier]
network = GenericClassifierTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.classifier.classifierClass = "inet::queueing::PacketDataClassifier"


[Config CompoundQueue]
network = CompoundPacketQueueTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.collector.collectionInterval = uniform(0s, 2s)
*.queue.classifier.weights = "1 1"


[Config Delayer]
network = DelayerTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.delayer.delay = uniform(0s, 2s)


[Config Demultiplexer]
network = DemultiplexerTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.numCollectors = 3
*.collector[*].collectionInterval = uniform(0s, 2s)


[Config Duplicator]
network = DuplicatorTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.duplicator.numDuplicates = intuniform(0, 1)


[Config Filter1]
network = Filter1TutorialStep
sim-time-limit = 10s

*.producer.packetLength = intuniform(1B, 2B)
*.producer.productionInterval = 1s
*.filter.packetFilter = "totalLength(\"1 B\")"


[Config Filter2]
network = Filter2TutorialStep
sim-time-limit = 10s

*.provider.packetLength = intuniform(1B, 2B)
*.collector.collectionInterval = 1s
*.filter.packetFilter = "totalLength(\"1 B\")"


[Config Gate1]
network = Gate1TutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.gate.openTime = 3s
*.gate.closeTime = 7s

[Config Gate2]
network = Gate2TutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.collector.collectionInterval = 1s
*.gate.openTime = 3s
*.gate.closeTime = 7s


[Config Labeler]
network = LabelerTutorialStep
sim-time-limit = 10s

*.producer.packetLength = intuniform(1B, 2B)
*.producer.productionInterval = 1s
*.labeler.packetFilters = "totalLength(\"1 B\"); totalLength(\"2 B\")"
*.labeler.packetDataFilters = "*;*"
*.labeler.labels = "small large"
*.classifier.labelsToGateIndices = "small 0 large 1"


[Config LeakyBucket]
network = LeakyBucketTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.bucket.server.processingTime = 1s


[Config Meter]
network = MeterTutorialStep
sim-time-limit = 100s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.meter.alpha = 0.9
*.limiter.maxPacketrate = 0.5


[Config Multiplexer]
network = MultiplexerTutorialStep
sim-time-limit = 10s

*.numProducers = 3
*.producer[*].packetLength = 1B
*.producer[*].productionInterval = uniform(0s, 2s)


[Config ExampleNetwork]
network = ExampleNetworkTutorialStep
sim-time-limit = 10s

*.*.sourceApplication.packetLength = 1B
*.*.sourceApplication.productionInterval = uniform(0s, 2s)
*.*.interface.server.processingTime = uniform(0s, 2s)
*.cable.*Delayer.delay = uniform(0s, 2s)


[Config OrdinalBasedDropper]
network = OrdinalBasedDropperTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.dropper.dropsVector = "0; 2; 4; 6; 8; 10"


[Config OrdinalBasedDuplicator]
network = OrdinalBasedDuplicatorTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.duplicator.duplicatesVector = "0; 2; 4; 6; 8; 10"


[Config PassiveSourceActiveSink]
network = ProviderCollectorTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.collector.collectionInterval = 1s


[Config PriorityBuffer]
network = PriorityBufferTutorialStep
sim-time-limit = 10s
cmdenv-event-banners = false
*.producer*.packetLength = 1B
*.producer*.productionInterval = uniform(0s, 1s)
*.collector*.collectionInterval = uniform(0s, 2s)
*.queue*.bufferModule = "^.buffer"
*.buffer.packetCapacity = 2


[Config PriorityClassifier]
network = PriorityClassifierTutorialStep
sim-time-limit = 10s

*.queue*.packetCapacity = 1
*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 1s)
*.collector*.collectionInterval = uniform(0s, 2s)


[Config PriorityQueue]
network = PriorityQueueTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.queue.numQueues = 2
*.queue.classifier.typename = "WrrClassifier"
*.queue.classifier.weights = "1 1"
*.collector.collectionInterval = uniform(0s, 2s)



[Config PriorityScheduler]
network = PrioritySchedulerTutorialStep
sim-time-limit = 10s

*.producer*.packetLength = 1B
*.producer*.productionInterval = uniform(0s, 2s)
*.collector.collectionInterval = uniform(0s, 1s)


[Config QueueFiller]
network = QueueFillerTutorialStep
sim-time-limit = 10s

*.filler.provider.packetLength = 1B
*.filler.tokenGenerator.queueModule = "queue"
*.collector.collectionInterval = 1s


[Config PacketQueue]
network = PacketQueueTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.collector.collectionInterval = uniform(0s, 2s)


[Config RedDropper]
network = RedDropperTutorialStep
sim-time-limit = 100s

*.producer.packetLength = 1B
*.producer.productionInterval = exponential(1s)
*.dropper.minth = 1
*.dropper.maxth = 3
*.dropper.maxp = 0.1
*.dropper.wq = 0.5
*.collector.collectionInterval = exponential(1s)


[Config RequestResponse]
network = RequestResponseTutorialStep
sim-time-limit = 100s

*.requestProducer.packetLength = 1B
*.requestProducer.productionInterval = uniform(0s, 2s)
*.requestConsumer.numKind = 2
*.requestConsumer.classifier.typename = "WrrClassifier"
*.requestConsumer.classifier.weights = "1 1"
*.requestConsumer.responseProducerModule = "^.responseProducer"
*.requestConsumer.tokenGenerator[0].numTokensPerPacket = 10
*.requestConsumer.tokenGenerator[1].numTokensPerPacket = 10
*.responseProducer.numKind = 2
*.responseProducer.provider[0].packetLength = intuniform(1B, 10B)
*.responseProducer.provider[0].providingInterval = uniform(0s, 0.2s)
*.responseProducer.provider[1].packetLength = intuniform(1B, 100B)
*.responseProducer.provider[1].providingInterval = uniform(0s, 0.2s)
*.responseProducer.tokenGenerator.serverModule = "^.^.requestConsumer.server"


[Config Scheduler]
network = SchedulerTutorialStep
sim-time-limit = 10s

*.provider*.packetLength = 1B
*.collector.collectionInterval = 1s
*.scheduler.weights = "1 1"


[Config Server]
network = ServerTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.server.processingTime = uniform(0s, 2s)

[Config TokenBasedServer]
network = TokenBasedServerTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.server.initialNumTokens = 10

[Config TimeBasedTokenGenerator]
network = TimeBasedTokenGeneratorTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.tokenGenerator.generationInterval = 1s
*.tokenGenerator.serverModule = "^.server"

[Config PacketBasedTokenGenerator]
network = PacketBasedTokenGeneratorTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.producer.packetLength = 1B
*.producer.productionInterval = 1s
#*.tokenGenerator.generationInterval = 1s
*.tokenGenerator.serverModule = "^.server"

[Config QueueBasedTokenGenerator]
network = QueueBasedTokenGeneratorTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.tokenGenerator.serverModule = "^.server"
*.tokenGenerator.queueModule = "^.queue"
*.collector.collectionInterval = 1s

[Config SignalBasedTokenGenerator] # error
network = SignalBasedTokenGeneratorTutorialStep
sim-time-limit = 10s

*.provider.packetLength = 1B
*.server.initialNumTokens = 1
*.tokenGenerator.signals = "packetDropped"
*.tokenGenerator.serverModule = "^.server"


[Config Tagger]
network = TaggerTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.tagger.hopLimit = 1


[Config Telnet]
network = TelnetTutorialStep
sim-time-limit = 100s

**.server.enterTokenGenerator.numTokensPerPacket = intuniform(0, 10)
**.server.responseProvider.packetLength = intuniform(100B, 1000B)
**.server.responseProvider.providingInterval = uniform(0s, 0.1s)


[Config TokenBucket]
network = TokenBucketTutorialStep
sim-time-limit = 10s

*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.bucket.server.maxNumTokens = 10
*.tokenGenerator.serverModule = "^.bucket.server"
*.tokenGenerator.generationInterval = uniform(0s, 2s)

